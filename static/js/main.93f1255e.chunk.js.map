{"version":3,"sources":["components/card/card.js","components/card-list/card-list.js","components/search-box/search-box.js","App.js","serviceWorker.js","index.js"],"names":["Card","_ref","monster","react_default","a","createElement","className","src","concat","id","alt","name","email","CardList","props","monsters","map","card_Card","key","SearchBox","placeholder","handleChange","type","onChange","App","state","searchField","e","_this","setState","target","value","fetch","res","json","users","this","console","log","_context","t0","_this$state","filteredMonsters","filter","toLowerCase","includes","search_box_SearchBox","card_list_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8UAGaA,SAAO,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,QAAH,OAClBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,OACEE,IAAG,wBAAAC,OAA0BN,EAAQO,GAAlC,0BACHC,IAAI,YAENP,EAAAC,EAAAC,cAAA,UAAKH,EAAQS,MACbR,EAAAC,EAAAC,cAAA,SAAIH,EAAQU,UCNHC,SAAW,SAAAC,GACtB,OACEX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACZQ,EAAMC,SAASC,IAAI,SAAAd,GAAO,OACzBC,EAAAC,EAAAC,cAACY,EAAD,CAAMC,IAAKhB,EAAQO,GAAIP,QAASA,SCL3BiB,SAAY,SAAAlB,GAAmC,IAAhCmB,EAAgCnB,EAAhCmB,YAAaC,EAAmBpB,EAAnBoB,aACvC,OACElB,EAAAC,EAAAC,cAAA,SACEiB,KAAK,SACLF,YAAaA,EACbd,UAAU,SACViB,SAAUF,MCkCDG,oNArCbC,MAAQ,CACNV,SAAU,GACVW,YAAa,MAafL,aAAe,SAAAM,GACbC,EAAKC,SAAS,CAAEH,YAAaC,EAAEG,OAAOC,qOATlBC,MAAM,4DAAlBC,kBACcA,EAAIC,cAAlBC,SACNC,KAAKP,SAAS,CAAEd,SAAUoB,sDAE1BE,QAAQC,IAAI,kBAAZC,EAAAC,iJAQK,IAAAC,EAC2BL,KAAKX,MAA/BV,EADD0B,EACC1B,SAAUW,EADXe,EACWf,YACZgB,EAAmB3B,EAAS4B,OAAO,SAAAzC,GAAO,OAC9CA,EAAQS,KAAKiC,cAAcC,SAASnB,EAAYkB,iBAElD,OACEzC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAACyC,EAAD,CACEzB,aAAce,KAAKf,aACnBD,YAAY,oBAEdjB,EAAAC,EAAAC,cAAC0C,EAAD,CAAUhC,SAAU2B,YAhCVM,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpD,EAAAC,EAAAC,cAACmD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.93f1255e.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./card.css\";\n\nexport const Card = ({ monster }) => (\n  <div className=\"card-container\">\n    <img\n      src={`https://robohash.org/${monster.id}?set=set2&size=250x250`}\n      alt=\"monster\"\n    />\n    <h2>{monster.name}</h2>\n    <p>{monster.email}</p>\n  </div>\n);\n","import React from \"react\";\nimport { Card } from \"../card/card\";\nimport \"./card-list.css\";\n\nexport const CardList = props => {\n  return (\n    <div className=\"card-list\">\n      {props.monsters.map(monster => (\n        <Card key={monster.id} monster={monster} />\n      ))}\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"./search-box.css\";\n\nexport const SearchBox = ({ placeholder, handleChange }) => {\n  return (\n    <input\n      type=\"search\"\n      placeholder={placeholder}\n      className=\"search\"\n      onChange={handleChange}\n    />\n  );\n};\n","import React, { Component } from \"react\";\nimport { CardList } from \"./components/card-list/card-list\";\nimport { SearchBox } from \"./components/search-box/search-box\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    monsters: [],\n    searchField: \"\"\n  };\n\n  async componentDidMount() {\n    try {\n      const res = await fetch(\"https://jsonplaceholder.typicode.com/users\");\n      const users = await res.json();\n      this.setState({ monsters: users });\n    } catch (err) {\n      console.log(\"We have an err:\", err);\n    }\n  }\n\n  handleChange = e => {\n    this.setState({ searchField: e.target.value });\n  };\n\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox\n          handleChange={this.handleChange}\n          placeholder=\"search monsters\"\n        />\n        <CardList monsters={filteredMonsters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}